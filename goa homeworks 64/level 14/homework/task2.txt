ალგორითმი არის რიკომენტირებული ნაბიჯების სერია, რომელიც მიზნად ისახავს გარკვეული ამოცანის გადაწყვეტას. იგი წარმოადგენს კითხვაზე პასუხის გაცემა ან პრობლემის გადაჭრა კონკრეტული, ლოგიკური ნაბიჯების დალაგებით. სხვა სიტყვებით რომ ვთქვათ, ალგორითმი არის ოპერაციების პასიური თანმიმდევრობა, რომლის დახმარებით შეიძლება გაცემული დავალების ან პრობლემის მოგვარება.

ალგორითმები შეიძლება იყოს როგორც ადამიანებისთვის გასაგები, ისე კომპიუტერებისთვის განკუთვნილი ინსტრუქციები. რაც შეეხება ალგორითმის ტექნიკურ ასპექტებს, ის აუცილებლად უნდა აკმაყოფილებდეს შემდეგ პრინციპებს:

დასრულია - ალგორითმი ყოველთვის უნდა დასრულდეს საბოლოო შედეგით.

განმარტებადი - თითოეული მოქმედება უნდა იყოს duidelijk და არ უნდა არსებობდეს ინტერპრეტაციის ობსკურობა.

დეტერმინირებული - ყოველი ნაბიჯი უნდა იყოს ზუსტად განსაზღვრული და უნიკალური.

შესრულებადობა - ალგორითმი უნდა შესრულდეს ცალკეული ნაბიჯებით, ანუ ის არ უნდა იყოს აბსტრაქტული, უნდა არსებობდეს რეალური ინსტრუქცია.

შეფასებადი - ალგორითმი უნდა იყოს პრაქტიკულად გამოსაყენებელი.

ალგორითმის წარმოდგენის გზები
ალგორითმი შეიძლება დაიყოს რამდენიმე ტიპის წარმოდგენით, მათი თვისებებით და გამოყენებით:

1. ტექსტური ფორმა (Pseudocode)
Pseudocode არის ალგორითმის აღწერის საშუალება, როდესაც იგი უპირატესობას ანიჭებს ადამიანური ენის სტრუქტურას და არაფორმალური ინტრეფეისს. ეს არის შეზღუდული „მხოლოდ-კოდი“ წერილობითი ფორმატი, რომელიც რთულ პროგრამულ ენებს აძლევს ალგორითმის ლოგიკის გასაგებად წარმოდგენას.

თვითშეგნება:

მარტივი და გასაგები.

არ არის დამოკიდებული კონკრეტულ პროგრამულ ენაზე.

შეიძლება შეიცავდეს პირობით სტრუქტურებს (if, while), ცვლადებს, ფუნქციებს და სხვა.

გამოიყენება დოკუმენტაციისთვის ან ალგორითმის დაბეჭდვისთვის, რათა მისი გაგება იყოს მარტივი.

2. ფლობების დიაგრამები (Flowcharts)
Flowchart წარმოადგენს ვიზუალურ ინტერფეისს, სადაც ალგორითმი წარმოჩნდება სხვადასხვა ცხრილისა და სიმბოლოების მეშვეობით. თითოეული ნაბიჯი გამოხატულია მარგინალური ფიგურებით, ხოლო პროცესი გრძელდება ღილაკების ან ხაზების მეშვეობით, რომლებიც გადადიან შემდეგ მოქმედებაზე.

თვითშეგნება:

ვიზუალური წარმოდგენა.

კარგად აჩვენებს პროცესის სტრუქტურას.

მარტივი ახსნა და ვიზუალური განლაგება, რომელიც იძლევა ალგორითმის ვიზუალიზაციას.

მახასიათებლები:

ხშირად გამოიყენება ბიზნეს ან პროცედურული დანიშნულებისთვის.

უზრუნველყოფს გარკვეულ ფორმას, რომ განისაზღვროს თითოეული ნაბიჯი.

უფრო რთულია პროგრამულ ენაში გარდაქმნა.

3. ბოქსის ნოტაცია (Box notation)
ეს არის ალგორითმის აღწერის კიდევ ერთი ვიზუალური ტიპი, სადაც სხვადასხვა პროცედურების განხილვა ხდება ბოქსების მეშვეობით, რომლებიც ერთმანეთთან დაკავშირებულია ან arrows-ს ან ხაზებით.

თვითშეგნება:

გამოიყენება ვიზუალიზაციისთვის.

ფორმალურად გამოხატავს ალგორითმების ლოგიკას.

4. ალგორითმის კოდი (Programming code)
ყველაზე რთული და ფორმალური ალგორითმის წარმოდგენის ტიპი. იგი განიხილავს იმ ალგორითმებს, რომლებიც დაწერილია კონკრეტული პროგრამული ენის კოდში.

თვითშეგნება:

კოდის სახით, რომელიც შესრულებადია.

მოიცავს ნებისმიერი პროგრამირების ენაში დაწერილ კოდებს, როგორც მაგალითად Python, Java, C++ და სხვა.

5. მეთოდოლოგიური დოკუმენტაცია
ეს არის ტექნიკური დოკუმენტაციის ფორმა, რომელშიც დეტალურად აღწერილია ალგორითმის განხორციელება, პროცედურული ნაბიჯები, ცვლადები, შიდა განყოფილებები და ა.შ.

უპირატესობა და არჩევანი
პერსონალურად, Pseudocode-ს ანიჭებ ძალიან დიდ უპირატესობას, რადგან:

მარტივი და გასაგებია.

არ მოითხოვს ფორმალურ პროგრამულ ენაზე საუბარს.

ვაჭრობა არ ხდება პროგრამის ვერსიით.

შეუძლია მარტივად გადაინაცვლოს სხვადასხვა პროგრამირების ენაზე.

კარგია როგორც უმაღლესი განათლებისა და კურსდამთავრებისთვის, რათა უფრო სწრაფად გაიგონ ლოგიკა.

Flowchart შეიძლება იყოს სასარგებლო ვიზუალიზაციისთვის, მაგრამ მე მის სახელს უპირატესობას არ მივანიჭებ, რადგან ვიზუალურად მეტად აბსტრაქტულია და რთულია მისი ქმედებების შენახვა ან პროგრამულ ენაში გადატანა.