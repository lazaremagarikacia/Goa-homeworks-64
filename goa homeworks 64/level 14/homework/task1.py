#<!--Control flow (მართვის ნაკადი) არის პროგრამირების კონცეფცია, რომელიც განასხვავებს სხვადასხვა ოპერაციების შესრულების क्रमრიგს და განსაზღვრავს, როგორ გადადიან პროგრამა სხვადასხვა ფუნქციებში, მეთოდებში და პროცესებში. სხვა სიტყვებით რომ ვთქვათ, control flow განსაზღვრავს იმ ხერხებს, რომლითაც პროგრამა ადგენს, რომელ კოდურ ნაწილში უნდა გადავიდეს ამა თუ იმ სიტუაციაში.-->

#<!--1. Sequencing (სეკვენცირება)
#მნიშვნელობა: Sequencing არის უმარტივესი control flow ტექნიკა, სადაც პროგრამა მოქმედებებს ასრულებს პუნქტიურად, ერთდროულად და პირდაპირ, როგორც კოდში წერია.

#აღწერა: კოდი რომ შესრულდეს თანმიმდევრულად, ყოველმა სტრიქონმა უნდა შესრულდეს იმის მიხედვით, როგორც კოდი გაწერილია. მაგალითად, პირველ რიგში პროგრამა ასრულებს პირველ სტრიქონს, შემდეგ მეორე და ასე შემდეგ.

#მაგალითი:-->


#<!--2. Selection (არჩევა)
#მნიშვნელობა: Selection არის გადაწყვეტილებების მიღების ტექნიკა, როდესაც პროგრამა აგრძელებს ერთი ოპერაციით მეორე ოპერაციაში გადასვლას, როგორც გარკვეული პირობა დგება.

#აღწერა: ამ ტექნიკის გამოყენებით პროგრამა ერთ-ერთი მიმართულებით მოქმედებს მხოლოდ მაშინ, როდესაც გარკვეული პირობები ხდება მართვადი. მაგალითად, if/else სტრუქტურების გამოყენება.-->


#<!--3. Iteration (იტერაცია)
#მნიშვნელობა: Iteration არის ტექნიკა, რომელიც საშუალებას აძლევს პროგრამას გაიმეოროს ერთი ან რამდენიმე ოპერაცია ან მოქმედება განსაზღვრულ რაოდენობაზე ან სანამ არ შესრულდება გარკვეული პირობა.

#აღწერა: ეს ტექნიკა გულისხმობს ციკლური ოპერაციების შესრულებას. ტიპური ციკლური სტრუქტურებია: for, while.-->


#<!--4. Jump (ხტომა)
#მნიშვნელობა: Jump-ის ტექნიკა გამოიყენება პროგრამაში უკონტროლო გადასვლებისთვის. ასეთი გადახტომები შეიძლება წარმოადგენდეს პროგრამის გარკვეულ ნაწილს ან ჩაუშვას კოდის შესრულება.

#აღწერა: break, continue, და return ფუნქციები გამოიყენება კონტროლის ნაკადის მართვისთვის.

#break – იტრიალებს ციკლის გარეთ.

#continue – გრძელდება ციკლი შემდეგ ეტაპზე, არ უშვებს დანარჩენ კოდის შესრულებას.

#return – გამოდის ფუნქციიდან და გადაცემს მნიშვნელობას.-->


#<!--5. Function Call (ფუნქციის გამოძახება)
#მნიშვნელობა: ფუნქციის გამოძახება წარმოადგენს ისეთ ტექნიკას, სადაც პროგრამა ან პროცესი მიმართავს სხვა პროცესში ან ფუნქციას, რომ გაწერილ კოდში განახორციელოს ფუნქციის ლოგიკა.

#აღწერა: ფუნქციის გამოძახება არის გზამკვლევი იმ ნაკადის მართვისთვის, სადაც ხორციელდება პოტენციურად ერთჯერადი ან მრავალჯერადი მოქმედება სხვა კოდში.-->



#<!--6. Exception Handling (გამონაკლისების დამუშავება)
#მნიშვნელობა: Exception handling არის ტექნიკა, რომელიც გამოიყენება იმისთვის, რომ დაიჭიროს შეცდომები (expections) და აიცილოს პროგრამის გადატრიალება.

#აღწერა: try, except, finally - ეს არის სტრუქტურები, რომლებიც უზრუნველყოფენ, რომ შეცდომები მართონ და პროგრამა გაჩერდეს მხოლოდ მაშინ, როცა საჭიროა.-->

















